services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: KrainetDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-1
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5
    networks:
      - backend

  auth-service:
    build: ./auth-service
    container_name: auth-service-1
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL:      jdbc:postgresql://postgres:5432/KrainetDB
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123
      SPRING_RABBITMQ_HOST:       rabbitmq
      SPRING_RABBITMQ_PORT:       5672
    ports:
      - "8081:8080"
    networks:
      - backend

  notification-service:
    build: ./notification-service
    container_name: notification-service-1
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
    ports:
      - "8080:8080"
    networks:
      - backend

volumes:
  pgdata:

networks:
  backend:
    driver: bridge
